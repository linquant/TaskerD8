<?php

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\tasker\Controller\TaskerController;

/**
 * Implements hook_help().
 */
function tasker_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the tasker module.
    case 'help.page.tasker':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Allows the creation of spots and affection to a user. The user receives an e-mail notification of the remaining tasks to be done.') . '</p>';
      return $output;

    default:
  }
}


/**
 * Implements hook_mail().
 */
function tasker_mail($key, &$message, $params) {
  // Each message is associated with a language, which may or may not be the
  // current user's selected language, depending on the type of e-mail being
  // sent. This $options array is used later in the t() calls for subject
  // and body to ensure the proper translation takes effect.
  $options = [
      'langcode' => $message['langcode'],
  ];

  switch ($key) {
    // Send a simple message from the contact form.
    case 'task_notifier':
      $from = \Drupal::config('system.site')->get('mail');
      $message['subject'] = t('E-mail sent from @site-name', ['@site-name' => $from], $options);
      // Note that the message body is an array, not a string.
      $account = \Drupal::currentUser();
      $message['body'][] = t('Liste des taches restants Ã  faire :');
      // Because this is just user-entered text, we do not need to translate it.
      // Since user-entered text may have unintentional HTML entities in it like
      // '<' or '>', we need to make sure these entities are properly escaped,
      // as the body will later be transformed from HTML to text, meaning
      // that a normal use of '<' will result in truncation of the message.
      $message['body'][] = $params['message'];
      break;
  }
}


function tasker_cron(){



  $taskercontroller = new TaskerController();

  $taskercontroller->list_task();

}
